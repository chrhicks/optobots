/**
 * Generated by apidoc - http://www.apidoc.me
 * Service version: 0.0.1-dev
 * apidoc:0.9.27 http://www.apidoc.me/photoop/portfolios/0.0.1-dev/ning_1_8_client
 */
package io.photoop.portfolios.v0.models {

case class Error(
                  code: String,
                  message: String
                  )

case class NewPortfolioForm(
                             userGuid: _root_.java.util.UUID
                             )

case class NewPortfolioGroupForm(
                                  key: String,
                                  name: String
                                  )

case class NewPortfolioGroupImageForm(
                                       imageGuid: _root_.java.util.UUID
                                       )

case class Portfolio(
                      guid: _root_.java.util.UUID,
                      userGuid: _root_.java.util.UUID,
                      photoGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
                      coverPhotoGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
                      name: _root_.scala.Option[String] = None,
                      bio: _root_.scala.Option[String] = None,
                      visibility: io.photoop.portfolios.v0.models.Visibility,
                      portfolioGroups: Seq[io.photoop.portfolios.v0.models.PortfolioGroup]
                      )

case class PortfolioForm(
                          photoGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
                          coverPhotoGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
                          name: _root_.scala.Option[String] = None,
                          bio: _root_.scala.Option[String] = None,
                          visibility: io.photoop.portfolios.v0.models.Visibility,
                          portfolioGroups: Seq[io.photoop.portfolios.v0.models.PortfolioGroup]
                          )

case class PortfolioGroup(
                           guid: _root_.java.util.UUID,
                           key: String,
                           name: String,
                           images: Seq[_root_.java.util.UUID]
                           )

case class UpdatePortfolioForm(
                                photoGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
                                coverPhotoGuid: _root_.scala.Option[_root_.java.util.UUID] = None,
                                name: _root_.scala.Option[String] = None,
                                bio: _root_.scala.Option[String] = None,
                                visibility: _root_.scala.Option[io.photoop.portfolios.v0.models.Visibility] = None
                                )

/**
 * Controls who can view the profile
 */
sealed trait Visibility

object Visibility {

  /**
   * Only the photographer can view this portfolio
   */
  case object User extends Visibility { override def toString = "user" }
  /**
   * Anybody, including non logged in users, can view this portfolio
   */
  case object Public extends Visibility { override def toString = "public" }

  /**
   * UNDEFINED captures values that are sent either in error or
   * that were added by the server after this library was
   * generated. We want to make it easy and obvious for users of
   * this library to handle this case gracefully.
   *
   * We use all CAPS for the variable name to avoid collisions
   * with the camel cased values above.
   */
  case class UNDEFINED(override val toString: String) extends Visibility

  /**
   * all returns a list of all the valid, known values. We use
   * lower case to avoid collisions with the camel cased values
   * above.
   */
  val all = Seq(User, Public)

  private[this]
  val byName = all.map(x => x.toString.toLowerCase -> x).toMap

  def apply(value: String): Visibility = fromString(value).getOrElse(UNDEFINED(value))

  def fromString(value: String): _root_.scala.Option[Visibility] = byName.get(value.toLowerCase)

}

}

package io.photoop.portfolios.v0.models {

package object json {
  import play.api.libs.json.__
  import play.api.libs.json.JsString
  import play.api.libs.json.Writes
  import play.api.libs.functional.syntax._
  import io.photoop.portfolios.v0.models.json._

  private[v0] implicit val jsonReadsUUID = __.read[String].map(java.util.UUID.fromString)

  private[v0] implicit val jsonWritesUUID = new Writes[java.util.UUID] {
    def writes(x: java.util.UUID) = JsString(x.toString)
  }

  private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
    import org.joda.time.format.ISODateTimeFormat.dateTimeParser
    dateTimeParser.parseDateTime(str)
  }

  private[v0] implicit val jsonWritesJodaDateTime = new Writes[org.joda.time.DateTime] {
    def writes(x: org.joda.time.DateTime) = {
      import org.joda.time.format.ISODateTimeFormat.dateTime
      val str = dateTime.print(x)
      JsString(str)
    }
  }

  implicit val jsonReadsPortfoliosVisibility = __.read[String].map(Visibility.apply)
  implicit val jsonWritesPortfoliosVisibility = new Writes[Visibility] {
    def writes(x: Visibility) = JsString(x.toString)
  }

  implicit def jsonReadsPortfoliosError: play.api.libs.json.Reads[Error] = {
    (
      (__ \ "code").read[String] and
        (__ \ "message").read[String]
      )(Error.apply _)
  }

  implicit def jsonWritesPortfoliosError: play.api.libs.json.Writes[Error] = {
    (
      (__ \ "code").write[String] and
        (__ \ "message").write[String]
      )(unlift(Error.unapply _))
  }

  implicit def jsonReadsPortfoliosNewPortfolioForm: play.api.libs.json.Reads[NewPortfolioForm] = {
    (__ \ "user_guid").read[_root_.java.util.UUID].map { x => new NewPortfolioForm(userGuid = x) }
  }

  implicit def jsonWritesPortfoliosNewPortfolioForm: play.api.libs.json.Writes[NewPortfolioForm] = new play.api.libs.json.Writes[NewPortfolioForm] {
    def writes(x: NewPortfolioForm) = play.api.libs.json.Json.obj(
      "user_guid" -> play.api.libs.json.Json.toJson(x.userGuid)
    )
  }

  implicit def jsonReadsPortfoliosNewPortfolioGroupForm: play.api.libs.json.Reads[NewPortfolioGroupForm] = {
    (
      (__ \ "key").read[String] and
        (__ \ "name").read[String]
      )(NewPortfolioGroupForm.apply _)
  }

  implicit def jsonWritesPortfoliosNewPortfolioGroupForm: play.api.libs.json.Writes[NewPortfolioGroupForm] = {
    (
      (__ \ "key").write[String] and
        (__ \ "name").write[String]
      )(unlift(NewPortfolioGroupForm.unapply _))
  }

  implicit def jsonReadsPortfoliosNewPortfolioGroupImageForm: play.api.libs.json.Reads[NewPortfolioGroupImageForm] = {
    (__ \ "image_guid").read[_root_.java.util.UUID].map { x => new NewPortfolioGroupImageForm(imageGuid = x) }
  }

  implicit def jsonWritesPortfoliosNewPortfolioGroupImageForm: play.api.libs.json.Writes[NewPortfolioGroupImageForm] = new play.api.libs.json.Writes[NewPortfolioGroupImageForm] {
    def writes(x: NewPortfolioGroupImageForm) = play.api.libs.json.Json.obj(
      "image_guid" -> play.api.libs.json.Json.toJson(x.imageGuid)
    )
  }

  implicit def jsonReadsPortfoliosPortfolio: play.api.libs.json.Reads[Portfolio] = {
    (
      (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "user_guid").read[_root_.java.util.UUID] and
        (__ \ "photo_guid").readNullable[_root_.java.util.UUID] and
        (__ \ "cover_photo_guid").readNullable[_root_.java.util.UUID] and
        (__ \ "name").readNullable[String] and
        (__ \ "bio").readNullable[String] and
        (__ \ "visibility").read[io.photoop.portfolios.v0.models.Visibility] and
        (__ \ "portfolio_groups").read[Seq[io.photoop.portfolios.v0.models.PortfolioGroup]]
      )(Portfolio.apply _)
  }

  implicit def jsonWritesPortfoliosPortfolio: play.api.libs.json.Writes[Portfolio] = {
    (
      (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "user_guid").write[_root_.java.util.UUID] and
        (__ \ "photo_guid").writeNullable[_root_.java.util.UUID] and
        (__ \ "cover_photo_guid").writeNullable[_root_.java.util.UUID] and
        (__ \ "name").writeNullable[String] and
        (__ \ "bio").writeNullable[String] and
        (__ \ "visibility").write[io.photoop.portfolios.v0.models.Visibility] and
        (__ \ "portfolio_groups").write[Seq[io.photoop.portfolios.v0.models.PortfolioGroup]]
      )(unlift(Portfolio.unapply _))
  }

  implicit def jsonReadsPortfoliosPortfolioForm: play.api.libs.json.Reads[PortfolioForm] = {
    (
      (__ \ "photo_guid").readNullable[_root_.java.util.UUID] and
        (__ \ "cover_photo_guid").readNullable[_root_.java.util.UUID] and
        (__ \ "name").readNullable[String] and
        (__ \ "bio").readNullable[String] and
        (__ \ "visibility").read[io.photoop.portfolios.v0.models.Visibility] and
        (__ \ "portfolio_groups").read[Seq[io.photoop.portfolios.v0.models.PortfolioGroup]]
      )(PortfolioForm.apply _)
  }

  implicit def jsonWritesPortfoliosPortfolioForm: play.api.libs.json.Writes[PortfolioForm] = {
    (
      (__ \ "photo_guid").writeNullable[_root_.java.util.UUID] and
        (__ \ "cover_photo_guid").writeNullable[_root_.java.util.UUID] and
        (__ \ "name").writeNullable[String] and
        (__ \ "bio").writeNullable[String] and
        (__ \ "visibility").write[io.photoop.portfolios.v0.models.Visibility] and
        (__ \ "portfolio_groups").write[Seq[io.photoop.portfolios.v0.models.PortfolioGroup]]
      )(unlift(PortfolioForm.unapply _))
  }

  implicit def jsonReadsPortfoliosPortfolioGroup: play.api.libs.json.Reads[PortfolioGroup] = {
    (
      (__ \ "guid").read[_root_.java.util.UUID] and
        (__ \ "key").read[String] and
        (__ \ "name").read[String] and
        (__ \ "images").read[Seq[_root_.java.util.UUID]]
      )(PortfolioGroup.apply _)
  }

  implicit def jsonWritesPortfoliosPortfolioGroup: play.api.libs.json.Writes[PortfolioGroup] = {
    (
      (__ \ "guid").write[_root_.java.util.UUID] and
        (__ \ "key").write[String] and
        (__ \ "name").write[String] and
        (__ \ "images").write[Seq[_root_.java.util.UUID]]
      )(unlift(PortfolioGroup.unapply _))
  }

  implicit def jsonReadsPortfoliosUpdatePortfolioForm: play.api.libs.json.Reads[UpdatePortfolioForm] = {
    (
      (__ \ "photo_guid").readNullable[_root_.java.util.UUID] and
        (__ \ "cover_photo_guid").readNullable[_root_.java.util.UUID] and
        (__ \ "name").readNullable[String] and
        (__ \ "bio").readNullable[String] and
        (__ \ "visibility").readNullable[io.photoop.portfolios.v0.models.Visibility]
      )(UpdatePortfolioForm.apply _)
  }

  implicit def jsonWritesPortfoliosUpdatePortfolioForm: play.api.libs.json.Writes[UpdatePortfolioForm] = {
    (
      (__ \ "photo_guid").writeNullable[_root_.java.util.UUID] and
        (__ \ "cover_photo_guid").writeNullable[_root_.java.util.UUID] and
        (__ \ "name").writeNullable[String] and
        (__ \ "bio").writeNullable[String] and
        (__ \ "visibility").writeNullable[io.photoop.portfolios.v0.models.Visibility]
      )(unlift(UpdatePortfolioForm.unapply _))
  }
}
}



package io.photoop.portfolios.v0 {
import com.ning.http.client.{AsyncCompletionHandler, AsyncHttpClient, AsyncHttpClientConfig, Realm, Request, RequestBuilder, Response}

object Constants {

  val UserAgent = "apidoc:0.9.27 http://www.apidoc.me/photoop/portfolios/0.0.1-dev/ning_1_8_client"
  val Version = "0.0.1-dev"
  val VersionMajor = 0

}

class Client(
              apiUrl: String,
              auth: scala.Option[io.photoop.portfolios.v0.Authorization] = None,
              defaultHeaders: Seq[(String, String)] = Nil,
              asyncHttpClient: AsyncHttpClient = Client.defaultAsyncHttpClient
              ) {
  import org.slf4j.Logger
  import org.slf4j.LoggerFactory
  import io.photoop.portfolios.v0.models.json._

  val logger = LoggerFactory.getLogger(getClass)

  def portfolioGroups: PortfolioGroups = PortfolioGroups

  def portfolios: Portfolios = Portfolios

  object PortfolioGroups extends PortfolioGroups {
    override def postByUserGuidAndPortfolioGuid(
                                                 userGuid: _root_.java.util.UUID,
                                                 portfolioGuid: _root_.java.util.UUID,
                                                 newPortfolioGroupForm: io.photoop.portfolios.v0.models.NewPortfolioGroupForm
                                                 )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.photoop.portfolios.v0.models.PortfolioGroup] = {
      val payload = play.api.libs.json.Json.toJson(newPortfolioGroupForm)

      _executeRequest("POST", s"/portfolio_groups/${userGuid}/${portfolioGuid}", body = Some(payload)).map {
        case r if r.getStatusCode == 200 => _root_.io.photoop.portfolios.v0.Client.parseJson("io.photoop.portfolios.v0.models.PortfolioGroup", r, _.validate[io.photoop.portfolios.v0.models.PortfolioGroup])
        case r if r.getStatusCode == 409 => throw new io.photoop.portfolios.v0.errors.ErrorsResponse(r)
        case r => throw new io.photoop.portfolios.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 200, 409", requestUri = Some(r.getUri))
      }
    }

    override def deleteByUserGuidAndPortfolioGuid(
                                                   userGuid: _root_.java.util.UUID,
                                                   portfolioGuid: _root_.java.util.UUID,
                                                   portfolioGroupGuid: _root_.java.util.UUID
                                                   )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Boolean] = {
      val queryParameters = Seq(
        Some("portfolio_group_guid" -> portfolioGroupGuid.toString)
      ).flatten

      _executeRequest("DELETE", s"/portfolio_groups/${userGuid}/${portfolioGuid}", queryParameters = queryParameters).map {
        case r if r.getStatusCode == 200 => _root_.io.photoop.portfolios.v0.Client.parseJson("Boolean", r, _.validate[Boolean])
        case r if r.getStatusCode == 409 => throw new io.photoop.portfolios.v0.errors.ErrorsResponse(r)
        case r => throw new io.photoop.portfolios.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 200, 409", requestUri = Some(r.getUri))
      }
    }

    override def postByUserGuidAndPortfolioGuidAndPortfolioGroupGuid(
                                                                      userGuid: _root_.java.util.UUID,
                                                                      portfolioGuid: _root_.java.util.UUID,
                                                                      portfolioGroupGuid: _root_.java.util.UUID,
                                                                      newPortfolioGroupImageForm: io.photoop.portfolios.v0.models.NewPortfolioGroupImageForm
                                                                      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.photoop.portfolios.v0.models.PortfolioGroup] = {
      val payload = play.api.libs.json.Json.toJson(newPortfolioGroupImageForm)

      _executeRequest("POST", s"/portfolio_groups/${userGuid}/${portfolioGuid}/${portfolioGroupGuid}", body = Some(payload)).map {
        case r if r.getStatusCode == 200 => _root_.io.photoop.portfolios.v0.Client.parseJson("io.photoop.portfolios.v0.models.PortfolioGroup", r, _.validate[io.photoop.portfolios.v0.models.PortfolioGroup])
        case r if r.getStatusCode == 409 => throw new io.photoop.portfolios.v0.errors.ErrorsResponse(r)
        case r => throw new io.photoop.portfolios.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 200, 409", requestUri = Some(r.getUri))
      }
    }

    override def deleteByUserGuidAndPortfolioGuidAndPortfolioGroupGuid(
                                                                        userGuid: _root_.java.util.UUID,
                                                                        portfolioGuid: _root_.java.util.UUID,
                                                                        portfolioGroupGuid: _root_.java.util.UUID,
                                                                        imageGuid: _root_.java.util.UUID
                                                                        )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.photoop.portfolios.v0.models.PortfolioGroup] = {
      val queryParameters = Seq(
        Some("image_guid" -> imageGuid.toString)
      ).flatten

      _executeRequest("DELETE", s"/portfolio_groups/${userGuid}/${portfolioGuid}/${portfolioGroupGuid}", queryParameters = queryParameters).map {
        case r if r.getStatusCode == 200 => _root_.io.photoop.portfolios.v0.Client.parseJson("io.photoop.portfolios.v0.models.PortfolioGroup", r, _.validate[io.photoop.portfolios.v0.models.PortfolioGroup])
        case r if r.getStatusCode == 409 => throw new io.photoop.portfolios.v0.errors.ErrorsResponse(r)
        case r => throw new io.photoop.portfolios.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 200, 409", requestUri = Some(r.getUri))
      }
    }
  }

  object Portfolios extends Portfolios {
    override def getByUserGuid(
                                userGuid: _root_.java.util.UUID
                                )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.photoop.portfolios.v0.models.Portfolio] = {
      _executeRequest("GET", s"/portfolios/${userGuid}").map {
        case r if r.getStatusCode == 200 => _root_.io.photoop.portfolios.v0.Client.parseJson("io.photoop.portfolios.v0.models.Portfolio", r, _.validate[io.photoop.portfolios.v0.models.Portfolio])
        case r if r.getStatusCode == 404 => throw new io.photoop.portfolios.v0.errors.UnitResponse(r.getStatusCode)
        case r => throw new io.photoop.portfolios.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 200, 404", requestUri = Some(r.getUri))
      }
    }

    override def post(
                       newPortfolioForm: io.photoop.portfolios.v0.models.NewPortfolioForm
                       )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.photoop.portfolios.v0.models.Portfolio] = {
      val payload = play.api.libs.json.Json.toJson(newPortfolioForm)

      _executeRequest("POST", s"/portfolios", body = Some(payload)).map {
        case r if r.getStatusCode == 200 => _root_.io.photoop.portfolios.v0.Client.parseJson("io.photoop.portfolios.v0.models.Portfolio", r, _.validate[io.photoop.portfolios.v0.models.Portfolio])
        case r if r.getStatusCode == 409 => throw new io.photoop.portfolios.v0.errors.ErrorsResponse(r)
        case r => throw new io.photoop.portfolios.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 200, 409", requestUri = Some(r.getUri))
      }
    }

    override def putByUserGuid(
                                userGuid: _root_.java.util.UUID,
                                portfolioForm: io.photoop.portfolios.v0.models.PortfolioForm
                                )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.photoop.portfolios.v0.models.Portfolio] = {
      val payload = play.api.libs.json.Json.toJson(portfolioForm)

      _executeRequest("PUT", s"/portfolios/${userGuid}", body = Some(payload)).map {
        case r if r.getStatusCode == 200 => _root_.io.photoop.portfolios.v0.Client.parseJson("io.photoop.portfolios.v0.models.Portfolio", r, _.validate[io.photoop.portfolios.v0.models.Portfolio])
        case r if r.getStatusCode == 409 => throw new io.photoop.portfolios.v0.errors.ErrorsResponse(r)
        case r => throw new io.photoop.portfolios.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 200, 409", requestUri = Some(r.getUri))
      }
    }

    override def patchByUserGuid(
                                  userGuid: _root_.java.util.UUID,
                                  updatePortfolioForm: io.photoop.portfolios.v0.models.UpdatePortfolioForm
                                  )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.photoop.portfolios.v0.models.Portfolio] = {
      val payload = play.api.libs.json.Json.toJson(updatePortfolioForm)

      _executeRequest("PATCH", s"/portfolios/${userGuid}", body = Some(payload)).map {
        case r if r.getStatusCode == 200 => _root_.io.photoop.portfolios.v0.Client.parseJson("io.photoop.portfolios.v0.models.Portfolio", r, _.validate[io.photoop.portfolios.v0.models.Portfolio])
        case r if r.getStatusCode == 409 => throw new io.photoop.portfolios.v0.errors.ErrorsResponse(r)
        case r => throw new io.photoop.portfolios.v0.errors.FailedRequest(r.getStatusCode, s"Unsupported response code[${r.getStatusCode}]. Expected: 200, 409", requestUri = Some(r.getUri))
      }
    }
  }

  def _logRequest(request: Request) {
    logger.info("_logRequest: " + request)
  }

  def _requestBuilder(method: String, path: String): RequestBuilder = {
    val builder = new RequestBuilder(method)
      .setUrl(apiUrl + path)
      .addHeader("User-Agent", Constants.UserAgent)
      .addHeader("X-Apidoc-Version", Constants.Version)
      .addHeader("X-Apidoc-Version-Major", Constants.VersionMajor.toString)

    defaultHeaders.foreach { h => builder.addHeader(h._1, h._2) }

    auth.fold(builder) { a =>
      a match {
        case Authorization.Basic(username, password) => {
          builder.setRealm(
            new Realm.RealmBuilder()
              .setPrincipal(username)
              .setUsePreemptiveAuth(true)
              .setScheme(Realm.AuthScheme.BASIC)
              .build()
          )
        }
        case _ => sys.error("Invalid authorization scheme[" + a.getClass + "]")
      }
    }
  }

  def _executeRequest(
                       method: String,
                       path: String,
                       queryParameters: Seq[(String, String)] = Seq.empty,
                       body: Option[play.api.libs.json.JsValue] = None
                       )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[com.ning.http.client.Response] = {
    val request = _requestBuilder(method, path)

    queryParameters.foreach { pair =>
      request.addQueryParameter(pair._1, pair._2)
    }

    val requestWithParamsAndBody = body.fold(request) { b =>
      val serialized = play.api.libs.json.Json.stringify(b)
      request.setBody(serialized).addHeader("Content-type", "application/json; charset=UTF-8")
    }

    val finalRequest = requestWithParamsAndBody.build()
    _logRequest(finalRequest)

    val result = scala.concurrent.Promise[com.ning.http.client.Response]()
    asyncHttpClient.executeRequest(finalRequest,
      new AsyncCompletionHandler[Unit]() {
        override def onCompleted(r: com.ning.http.client.Response) = result.success(r)
        override def onThrowable(t: Throwable) = result.failure(t)
      }
    )
    result.future
  }

}

object Client {

  private lazy val defaultAsyncHttpClient = {
    new AsyncHttpClient(
      new AsyncHttpClientConfig.Builder()
        .setExecutorService(java.util.concurrent.Executors.newCachedThreadPool())
        .build()
    )
  }

  def parseJson[T](
                    className: String,
                    r: _root_.com.ning.http.client.Response,
                    f: (play.api.libs.json.JsValue => play.api.libs.json.JsResult[T])
                    ): T = {
    f(play.api.libs.json.Json.parse(r.getResponseBody("UTF-8"))) match {
      case play.api.libs.json.JsSuccess(x, _) => x
      case play.api.libs.json.JsError(errors) => {
        throw new io.photoop.portfolios.v0.errors.FailedRequest(r.getStatusCode, s"Invalid json for class[" + className + "]: " + errors.mkString(" "), requestUri = Some(r.getUri))
      }
    }
  }

}

sealed trait Authorization
object Authorization {
  case class Basic(username: String, password: Option[String] = None) extends Authorization
}

trait PortfolioGroups {
  /**
   * Add a portfolio group to a portfolio
   */
  def postByUserGuidAndPortfolioGuid(
                                      userGuid: _root_.java.util.UUID,
                                      portfolioGuid: _root_.java.util.UUID,
                                      newPortfolioGroupForm: io.photoop.portfolios.v0.models.NewPortfolioGroupForm
                                      )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.photoop.portfolios.v0.models.PortfolioGroup]

  /**
   * Remove a portfolio group from a portfolio
   */
  def deleteByUserGuidAndPortfolioGuid(
                                        userGuid: _root_.java.util.UUID,
                                        portfolioGuid: _root_.java.util.UUID,
                                        portfolioGroupGuid: _root_.java.util.UUID
                                        )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[Boolean]

  /**
   * Adds an image to a portfolio group
   */
  def postByUserGuidAndPortfolioGuidAndPortfolioGroupGuid(
                                                           userGuid: _root_.java.util.UUID,
                                                           portfolioGuid: _root_.java.util.UUID,
                                                           portfolioGroupGuid: _root_.java.util.UUID,
                                                           newPortfolioGroupImageForm: io.photoop.portfolios.v0.models.NewPortfolioGroupImageForm
                                                           )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.photoop.portfolios.v0.models.PortfolioGroup]

  /**
   * Remove an image from a portfolio group
   */
  def deleteByUserGuidAndPortfolioGuidAndPortfolioGroupGuid(
                                                             userGuid: _root_.java.util.UUID,
                                                             portfolioGuid: _root_.java.util.UUID,
                                                             portfolioGroupGuid: _root_.java.util.UUID,
                                                             imageGuid: _root_.java.util.UUID
                                                             )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.photoop.portfolios.v0.models.PortfolioGroup]
}

trait Portfolios {
  /**
   * Retrieve a user's portfolio
   */
  def getByUserGuid(
                     userGuid: _root_.java.util.UUID
                     )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.photoop.portfolios.v0.models.Portfolio]

  /**
   * Create a portfolio for a user
   */
  def post(
            newPortfolioForm: io.photoop.portfolios.v0.models.NewPortfolioForm
            )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.photoop.portfolios.v0.models.Portfolio]

  /**
   * Update a portfolio for a user. Missing fields will be deleted from the db
   */
  def putByUserGuid(
                     userGuid: _root_.java.util.UUID,
                     portfolioForm: io.photoop.portfolios.v0.models.PortfolioForm
                     )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.photoop.portfolios.v0.models.Portfolio]

  /**
   * Update a portfolio for a user. Only present fields will be modified. Missing
   * fields will be ignored.
   */
  def patchByUserGuid(
                       userGuid: _root_.java.util.UUID,
                       updatePortfolioForm: io.photoop.portfolios.v0.models.UpdatePortfolioForm
                       )(implicit ec: scala.concurrent.ExecutionContext): scala.concurrent.Future[io.photoop.portfolios.v0.models.Portfolio]
}

package errors {

import io.photoop.portfolios.v0.models.json._

case class ErrorsResponse(
                           response: _root_.com.ning.http.client.Response,
                           message: Option[String] = None
                           ) extends Exception(message.getOrElse(response.getStatusCode + ": " + response.getResponseBody("UTF-8"))){
  lazy val errors = _root_.io.photoop.portfolios.v0.Client.parseJson("Seq[io.photoop.portfolios.v0.models.Error]", response, _.validate[Seq[io.photoop.portfolios.v0.models.Error]])
}

case class UnitResponse(status: Int) extends Exception(s"HTTP $status")

case class FailedRequest(responseCode: Int, message: String, requestUri: Option[_root_.java.net.URI] = None) extends Exception(s"HTTP $responseCode: $message")

}

object PathSegment {
  // See https://github.com/playframework/playframework/blob/2.3.x/framework/src/play/src/main/scala/play/utils/UriEncoding.scala
  def encode(s: String, inputCharset: String): String = {
    val in = s.getBytes(inputCharset)
    val out = new java.io.ByteArrayOutputStream()
    for (b <- in) {
      val allowed = segmentChars.get(b & 0xFF)
      if (allowed) {
        out.write(b)
      } else {
        out.write('%')
        out.write(upperHex((b >> 4) & 0xF))
        out.write(upperHex(b & 0xF))
      }
    }
    out.toString("US-ASCII")
  }

  private def upperHex(x: Int): Int = {
    // Assume 0 <= x < 16
    if (x < 10) (x + '0') else (x - 10 + 'A')
  }

  private[this] val segmentChars: java.util.BitSet = membershipTable(pchar)

  private def pchar: Seq[Char] = {
    val alphaDigit = for ((min, max) <- Seq(('a', 'z'), ('A', 'Z'), ('0', '9')); c <- min to max) yield c
    val unreserved = alphaDigit ++ Seq('-', '.', '_', '~')
    val subDelims = Seq('!', '$', '&', '\'', '(', ')', '*', '+', ',', ';', '=')
    unreserved ++ subDelims ++ Seq(':', '@')
  }

  private def membershipTable(chars: Seq[Char]): java.util.BitSet = {
    val bits = new java.util.BitSet(256)
    for (c <- chars) { bits.set(c.toInt) }
    bits
  }
}
}
